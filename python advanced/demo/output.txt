http://softuni.bg
Юнит тестване / Интеграционно тестване / 
Системно тестване / Приемно тестване
 Функционално и нефункционално тестване
Типове и нива на тестване
Софтуерен университет
Преподавателски екип
СофтУни
2
1. Нива на тестване
▪ Юнит тестване (компонентно тестване)
▪ Интеграционно тестване
▪ Системно тестване
▪ Тестване за приемане от краен потребител
(приемно тестване)
2. Типове тестване
▪
Функционално тестване
▪
Нефункционално тестване
Съдържание
sli.do
#QA-Basics
Въпроси
3
Нива на тестване
Юнит тестване / Интеграционно тестване / 
Системно тестване / Приемно тестване
▪ Групи от тестови дейности
▪ Всяко ниво е част от тестовия процес
▪ Съответства на определена фаза от разработката на 
софтуера
▪ Тест нива:
▪ Тестване за одобрение / Приемно тестване 
(Acceptance testing)
▪ Системно тестване (System testing)
▪ Интеграционно тестване (Integration testing)
▪ Юнит тестване / Компонентно тестване (Unit testing)
Нива на тестване
5
6
Йерархия на тестовите нива
Приемно тестване
(Acceptance testing)
Интеграционно тестване
(Integration testing)
Юнит тестване
(Unit testing)
Системно тестване
(System testing)
Тестване на отделен компонент
Юнит тестване
8
▪ Проверяване на всяко 
яйце от кутията, преди 
закупуването ѝ
Юнит тестване в реалния живот
▪ Проверяване дали 
фаянсовата плочка не е 
счупена, преди 
нанасянето на лепило
9
▪ Какво е юнит тестване? 
▪ Нарича се още компонентно тестване
▪ Първото или най-базово ниво на тестване
▪ Тества отделни компоненти на софтуера
▪ Компонент може да бъде отделна функция, метод, модул или обект
▪ Обикновено се извършва от самите програмисти във фазата на писане на
код
▪ Изпълнява се изолирано
▪ Защо ни е необходимо?
▪ Проверява дали отделните компоненти работят коректно
▪ Позволява дефектите да бъдат отстранени рано, още във фазата на 
разработка
Юнит тестване / Unit Testing
10
▪ Проверка на възрастта
Програмата задава въпрос: "На колко години си?"
Прочита вевъдените от потребителя "години"
 
 
ако годините са >= 18
 
 
връща вярно
 
 
в противен случай
 
 
връща невярно
Юнит тестване: Пример
Положителен тест(20) → очаква се вярно
Отрицателен тест (16) → очаква се невярно
Граничен тест (18) → очаква се вярно
Тестване на взаимодействието между компоненти
Интеграционно тестване
▪ Столове подходящи 
за маса
Интеграционно тестване в реалния свят
▪ Врата и каса за врата
13
▪ Какво е интеграционно тестване? 
▪ Второ ниво от процеса по тестване на софтуер
▪ Отделните компоненти или единици на софтуера се тестват в
група
Интеграционно тестване / Integration Testing (1)
▪ Извършва се от програмисти, QA 
специалисти или специални 
интеграционни екипи
▪ Предполага се, че компонентите 
вече са тествани поотделно
14
▪ Защо ни е необходимо интеграционното тестване?
▪ След свързването на отделните компоненти един с друг, 
може да възникне нова грешка
▪ Тестването трябва да потвърди, че всички свързани 
компоненти си взаимодействат правилно 
▪ Основната цел е да се открият грешките в:
▪ Интерфейси
▪ Взаимодействието между интегрирани компоненти
▪ Взаимодействието между системи
Интеграционно тестване / Integration Testing 
(2)
15
▪ Вътрешно интеграционно тестване
▪ Разкрива дефекти в интерфейсите и взаимодействието между 
интегрираните компоненти
▪ "Integration test in the small" 
 
▪ Външно интеграционно тестване
▪ Тестване на съчетанието на системи и пакети
▪ Тестване на интерфейси към външни организации
▪ "Integration test in the large" 
Поднива на интеграционното тестване
16
▪ GitHub има няколко модула (компоненти):
▪ Home Page → Login Page → User Dashboard
▪ Всеки от тях е тестван поотделно
▪ Искаме да проверим дали работят заедно
▪ Интеграционни тестове:
▪ Тестваме дали бутонът за вход води към формата за вход
▪ Тестваме дали след успешно влизане с потребителско име и
парола, се показва потребителският дашборд
▪ Тестваме дали след излизане от профила, потребителският 
дашборд е недостъпен
Интеграционно тестване: Пример
Тестване на цялата система
Системно тестване
▪ В автомобилната индустрия, всеки произведен автомобил е щателно
тестван, в края на производствения процес:
▪ Двигател, джанти, волан, спирачки
▪ Врати, ключалки, седалки
▪ Електрическа система: светлини, чистачки,
климатик
▪ Мултимедийна система: радио, GPS, карти
▪ и т.н.
▪ QA-те вече са оценили всички тези функциoналности поотделно, а
също и взаимодействащи една с друга, но те трябва бъдат
тествани и като цялостна система
Системно тестване в реалния живот
19
▪ Какво е системно тестване ? 
▪ Трето ниво от процеса по тестване на софтуер
▪ С фокус върху цялата система:
▪ Нейното поведение (какво прави системата)
▪ Колата правилно ли е сглобена, работи ли по предназначение?
▪ Нейните възможности (как се справя системата)
▪ Дали автомобилът е надежден, сигурен, в добро състояние, каква е 
неговата производителност и ефективност
▪ Реализира се чрез тестване "от край до край" (E2E, end-to-end)
▪ Извършва се само от QA специалисти
Системно тестване / System Testing (1)
20
▪ Защо ни е необходимо системно тестване?
▪ Предишни тестове са били изпълнени спрямо технически 
спецификации
▪ Системните тестове разглеждат системата от гледна точка на 
крайния потребител
▪ Системните тестове проверяват дали всички компоненти на 
дадена система функционират при реален сценарии
▪ Системното
тестване
може
да
бъде
функционално
и
нефункционално. Това гарантира работеща за крайния
потребител система
Системно тестване (2)
21
▪ Системното тестване 
изисква специално 
обособена "стейджинг" 
среда
▪ Максимално точно копие 
на сайта/приложението, 
до което имат достъп 
крайните потребители, 
предназначено за 
системно тестване
Системно тестване: Пример
•
Използва се от клиенти (на живо)
•
Пълни данни
•
Използва се от QA
специалисти
и/или клиенти за UAT
•
Ограничени данни
•
Използва се от QA специалисти
•
Без клиентски данни
•
Използва се от програмисти
•
Без клиентски данни
Тестване
(Testing)
Разработване
(Development)
Продукция
(Production)
Стейджинг
(Staging)
*UAT - User Acceptance Testing / 
Потребителско тестване за одобрение
Клиентът тества крайния продукт от бизнес 
гледна точка
Тестване за приемане от крайния клиент
▪ Собственик на апартамент, проверява апартамента след 
ремонт
▪ Всички стаи: подове, тавани, стени, врати, прозорци
▪ Уреди
▪ Мебели
▪ Вода и водопровод
▪ Електричество
▪ Газ
▪ и т.н.
Приемно тестване в реалния живот
24
▪ Какво е тестване за приемане от крайния клиент? 
▪ Последното ниво, обикновено преди внедряване (deployment)
▪ Валидира цялостно функцонално бизнес решение
▪ Под внимание се вземат законовите и/или регулаторните изисквания
▪ Приемното тестване се изпълнява:
▪ От членове на бизнес екипа (алфа тестване)
▪ От крайни потребители (бета тестване)
▪ Следват се оперативни инструкции
▪ Гарантира се спазване на договорните и регулаторни насоки
Приемно тестване/ Acceptance Testing (1)
25
▪ Защо ни е необходимо тестване за приемане от крайния 
потребител?
▪ Проверява работата на системата, обикновено преди 
внедряване
▪ Основната цел е работещо бизнес решение
▪ Не се фокусира върху козметичните грешки
▪ Отговаря на въпроса, дали актуалното поведение на 
системата съответства на очакванията на клиента
Приемно тестване (2)
26
▪ Най-новият Microsoft Windows се тества първо локално в Редмънд (алфа
тестване), след това от външни потребители (навсякъде по света)
Приемно тестване: Пример
Алфа тестери
▪ Група вътрешни потребители
▪ Запознати са с проекта
▪ Не участват пряко в развитието му
▪ Тестват дали приложението работи 
правилно
▪ Дават обратна информация за това 
как потребителското изживяване 
може да се подобри
Бета тестери
▪ След алфа тестването, продуктът и
грешките се коригират
▪ Бета
тестването
се
извършва
от
избрана група крайни потребители
▪ Служи като "плавен старт"
▪ Обратна връзка от реални 
потребители, които нямат 
предварителни познания за 
приложението и/или новите 
функции
Типове тестване
Функционално и нефункционално тестване
28
▪ Група от тест дейности, които тестват специфични 
характеристики на определена софтуерна система
▪ Типовете тестове се разделят на две основни групи:
▪ Функционално тестване
▪ Отговаря на въпроса "Какво?"
▪ Потвърждава правилното функциониране на софтуера
▪ Нефункционално тестване
▪ Отговаря на въпроса "Как?"
▪ Потвърждава ефективността и производителността на софтуера
Типове тестване
29
▪ Функционалното тестване на софтуер за онлайн банкиране 
включва:
▪ Тестване дали средствата са точно преведени 
▪ Дали лихвените изчисления са правилни
▪ Дали плащанията по сметки се извършват навреме
▪ Нефункционално тестване се фокусира върху сигурността на 
системата:
▪ Да се гарантира, че достъпът е напълно безопасен
▪ Да се гарантира, че системата може да се справи с натоварването
▪ Особено в пикови периоди, като началото на месеца, когато масово се 
изплащат заплати и други плащания към бюджета
Типове тестване: Пример
30
▪ Типовете тестване могат да се прилагат на много/всички 
тестови нива
▪ Пример: тестване на сценарий "регистрирай потребител"
▪ Функционални тестове:
▪ Валидна потребителска информация, невалидна потребителска 
информация, дублирана потребителска информация
▪ Нефункционални тестове:
▪ Производителност
(100
хиляди
потребители),
надеждност
(по 1 потребител в секунда за 24 часа), UX тест (навигацията
лесна ли е за потребителя)
Типове тестване и нива на тестване
Тестване на определени функции
Функционално тестване
32
▪ Сешоар: Функционално тестване
▪ Старт / Стоп
▪ Промяна на силата
▪ Горещ / студен въздух
▪ Йонни настройки
▪ Тестове на различни приставки
▪ Тестове на прибиращия се кабел
▪ и т.н.
Функционално тестване в реалния живот
33
▪ Тества функциите, които една система трябва да изпълнява
▪ Функциите са "какво" трябва да прави системата
▪ Потвърждава дали софтуерната система отговаря на  
функционалните изисквания 
▪ Функционалното тестване основно включва тестване тип черна 
кутия (black box testing)
▪ Функционално покритие:
▪ Начин да се измери покритието на функционалните тестове 
върху определена функционалност
Функционално тестване
▪ Тестване на основните функции на приложение
▪ Съобщения за грешка
▪ Проверка дали се извеждат
подходящи съобщения за грешка
▪ Базисно приложение
▪ Безпроблемна навигация през различните екрани
▪ Достъп
▪ Проверка на достъпа на потребителя до системата 
34
Цели на функционалното тестване
35
▪ Функционални тестове за файлов архиватор (като 7-Zip или 
WinRAR):
▪ Архивиране на папка в архив
▪ Разархивиране на папка
▪ Архивиране на един файл
▪ Архивиране на няколко файла
▪ Архивиране на празна папка
▪ и т.н.
Функционално тестване: Пример
Тества аспекти, които не са функционалност
Нефункционално тестване
37
▪ Сешоар: нефункционално тестване
▪ Тест за прегряване: ако сешоара работи 30 минути
▪ Колко време отнема да се промени температурата на 
въздушния поток?
▪ Тест за шум
▪ Тест за падане
▪ Тест за тегло / размери
▪ Електрическият кабел достатъчно дълъг ли е?
▪ Лесно ли се използва с лява и дясна ръка?
Нефункционално тестване: Пример от реалния живот
38
▪ Нефункционалното тестване оценява:
▪ Надеждност
▪ Ефективност на работата
▪ Сигурност / безопасност
▪ Тества "Как" или  какво е качеството, с което системата 
изпълнява своите функции
Нефункционално тестване
39
▪ Нефункционалното тестване се фокусира главно
върху подобряване качеството на:
▪ Лесната употреба
▪ Ефективността
▪ Поддръжката
▪ Преносимостта на продукта
Цели на нефункционалното тестване
40
▪ Нефункционални тестове за файлов архиватор (като 7-Zip или 
WinRAR):
▪ Тест за скорост: колко бързо се компресират файлове / папки
▪ Тест за скорост: колко бързо се разархивират файлове / папки
▪ Размер на архива: сравнение на различни нива на компресия
▪ Тест за сигурност: архивиране / разархивиране на файл, защитен 
с парола
▪ Тест за препълване: компресиране / разархивиране на папка с 
500 хил. файла
▪ Тест за претоварване: компресиране / разархивиране на 50 
файла паралелно
Нефункционално тестване: Пример
▪ …
▪ …
▪ …
Какво научихме днес?
41
▪
Различни нива на тестване
▪
Юнит тестване: тестване на единичен компонент
▪
Интеграционно тестване: тестване на взаимодействието 
между компонентите
▪
Системно тестване: QA-те тестват цялата система
▪
Приемно тестване: Клиентът тества крайния продукт
▪
Различни типове тестване
▪
Функционално тестване: тестване на софтуерната 
функционалност
▪
Нефункционално тестване: производителност, 
надеждност и др.
Въпроси?
Диамантени партньори на СофтУни
▪ Официален уеб сайт:
▪ Официален дискусионен форум:
▪ Официална фейсбук група:
Уеб сайт на курса, Форум и FB група
https://softuni.bg/trainings/4357/qa-basics-november-2023
https://softuni.bg/forum
https://www.facebook.com/groups/qabasicsnovember2023 
44
45
Лиценз
▪ Този курс (презентации, примери, демонстрационен код, 
упражнения, домашни, видео и други активи) представлява
защитено авторско съдържание
▪ Нерегламентирано копиране, разпространение или 
използване е незаконно
▪ © СофтУни – https://softuni.org
▪ © Софтуерен университет – https://softuni.bg
46
Обучения в Софтуерен университет (СофтУни)
▪ Софтуерен университет – качествено образование, 
професия и работа за софтуерни инженери
▪ softuni.bg
▪ Фондация "Софтуерен университет"
▪ softuni.foundation
▪ Софтуерен университет @ Facebook
▪ facebook.com/SoftwareUniversity
▪ Дискусионни форуми на СофтУни
▪ forum.softuni.bg
